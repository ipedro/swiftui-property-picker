name: CI

on:
  push:
    branches: ["main"]

permissions:
  contents: write

jobs:
  format-and-merge-files:
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v4
    - name: Run SwiftFormat
      run: swiftformat .

    - name: Clean and create output directory
      run: |
        rm -rf output .build
        mkdir -p output .build

    - name: Concatenate files
      run: |
        find Development -type f -name '*.swift' | sort | xargs cat > PropertyPicker.swift

    - name: Remove SwiftLint commands
      run: |
        sed '/\/\/ swiftlint:/d' PropertyPicker.swift > .build/temp && mv .build/temp PropertyPicker.swift

    - name: Prepare LICENSE content
      run: |
        # Prepend "// " to each line in LICENSE and save it to a temp file
        sed 's/^/\/\/ /' LICENSE > .build/license_commented.txt
    
    - name: Add newlines between LICENSE and imports
      run: |
        # Create a file with newline
        echo -e "\n// auto-generated file, do not edit directly\n" > .build/newlines.txt

    - name: Reorder, sort, and remove duplicate imports
      run: |
        # Extract, sort, and remove duplicates from import statements
        awk '/^import / {print}' PropertyPicker.swift | sort | uniq > .build/sorted_unique_imports.txt

        # Remove import statements from the original file
        awk '!/^import /' PropertyPicker.swift > .build/code_without_imports.txt

        # Concatenate sorted and unique imports with the rest of the file
        cat .build/sorted_unique_imports.txt .build/code_without_imports.txt > .build/code_with_sorted_imports.txt

    - name: Combine LICENSE, newlines, imports, and remaining content
      run: |
        # Concatenate LICENSE content with two newlines, imports, and the rest of the file
        cat .build/license_commented.txt .build/newlines.txt .build/code_with_sorted_imports.txt > PropertyPicker.swift
    
    - name: Check for changes
      id: check_changes
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "has_changes=true" >> $GITHUB_OUTPUT
        else
          echo "has_changes=false" >> $GITHUB_OUTPUT
        fi
          
    - name: Commit changes
      if: ${{ steps.check_changes.outputs.has_changes == 'true' }}
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        if [[ -n "$(git status --porcelain PropertyPicker.swift)" ]]; then
          git add PropertyPicker.swift
          git commit -m "Generated PropertyPicker.swift"
          git push origin HEAD:main
        else
          echo "No changes to commit"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}